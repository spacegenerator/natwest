####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

# Test code for cockroachdb_query module
# Copyright: (c) 2021, Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- vars:
    conn_parameters: &conn_params
      ssl_mode: verify-full
      ssl_root_cert: '{{ ssl_root_cert }}'
      ssl_cert: '{{ ssl_cert }}'
      ssl_key: '{{ ssl_key }}'
    task_parameters: &task_params
      register: result

  block:

  - name: Check connection
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: 'SELECT VERSION()'

  - name: Check
    assert:
      that:
        - result is changed
        - result.query == 'SELECT VERSION()'
        - result.statusmessage == 'SELECT 1'
        - result.rowcount == 1
        - result.query_result.0.version is search('CockroachDB')



  - name: Create test database
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: 'CREATE DATABASE test_db'

  - name: Check
    assert:
      that:
        - result is changed
        - result.query == 'CREATE DATABASE test_db'
        - result.statusmessage == 'CREATE DATABASE'
        - result.rowcount == -1
        - result.query_result == []



  - name: Create test table
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: 'CREATE TABLE test_db.test_table (id int, story text)'

  - name: Check
    assert:
      that:
        - result is changed
        - result.query == 'CREATE TABLE test_db.test_table (id int, story text)'
        - result.statusmessage == 'CREATE TABLE'
        - result.rowcount == -1
        - result.query_result == []



  - name: Insert using positional arguments
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: 'INSERT INTO test_db.test_table (id, story) VALUES (%s, %s)'
      positional_args:
        - 1
        - 'hello'

  - name: Check
    assert:
      that:
      - result is changed
      - result.query == "INSERT INTO test_db.test_table (id, story) VALUES (1, 'hello')"
      - result.statusmessage == 'INSERT 0 1'
      - result.rowcount == 1
      - result.query_result == []



  - name: Insert using named arguments
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: 'INSERT INTO test_db.test_table (id, story) VALUES (%(id)s, %(story)s)'
      named_args:
        id: 2
        story: 'bye'

  - name: Check
    assert:
      that:
      - result is changed
      - result.query == "INSERT INTO test_db.test_table (id, story) VALUES (2, 'bye')"
      - result.statusmessage == 'INSERT 0 1'
      - result.rowcount == 1
      - result.query_result == []

  - name: Check the inserted rows are present in DB
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: 'SELECT * FROM test_db.test_table'

  - name: Check
    assert:
      that:
      - result is changed
      - result.query == 'SELECT * FROM test_db.test_table'
      - result.statusmessage == 'SELECT 2'
      - result.rowcount == 2
      - result.query_result.0.id == 1
      - result.query_result.0.story == 'hello'
      - result.query_result.1.id == 2
      - result.query_result.1.story == 'bye'


  - name: Create table containing decimals and timedelta
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: '{{ item }}'
    loop:
    - CREATE TABLE test_db.decimals_timedelta (dec numeric, ti interval)
    - INSERT INTO test_db.decimals_timedelta (dec, ti) VALUES (1.01, '80 minutes'::interval)

  - name: Fetch data from table containing decimals and timedelta
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: SELECT * FROM test_db.decimals_timedelta

  - name: Check
    assert:
      that:
        - result is changed
        - result.rowcount == 1
        - result.statusmessage == 'SELECT 1'
        - result.query_result.0.dec == 1.01
        - result.query_result.0.ti == '1:20:00'

  - name: Fetch data from table containing decimals and timedelta using tuple rows type
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      query: SELECT * FROM test_db.decimals_timedelta
      rows_type: tuple

  - name: Check
    assert:
      that:
        - result is changed
        - result.rowcount == 1
        - result.statusmessage == 'SELECT 1'
        - result.query_result.0.0 == 1.01
        - result.query_result.0.1 == '1:20:00'

  - name: Connect to test DB directly and run query there
    <<: *task_params
    cockroachdb_query:
      <<: *conn_params
      login_db: test_db
      query: 'SHOW TABLES'

  - name: Check
    assert:
      that:
        - result is changed
        - result.rowcount == 2
        - result.statusmessage == 'SHOW TABLES 2'
